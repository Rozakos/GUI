from tkinter import *
from tkinter import ttk
from tkinter import scrolledtext
import time

#Constants
GUI_WIDTH = 1000
GUI_HEIGHT = 550

#Tests definition
GroupTests = ['GroupTest A', 'GroupTest B', 'GroupTest C', 'GroupTest D']
SubTests = [['Test A1', 'Test A2', 'Test A3', 'Test A4', 'Test A5', 'Test A6', 'Test A7',
             'Test A8', 'Test A9', 'Test A10'],
            ['Test B1', 'Test B2', 'Test B3', 'Test B4', 'Test B5', 'Test B6', 'Test B7',
             'Test B8', 'Test B9', 'Test B10'],
            ['Test C1', 'Test C2', 'Test C3', 'Test C4', 'Test C5', 'Test C6', 'Test C7',
            'Test C8', 'Test C9', 'Test C10'],
            ['Test D1', 'Test D2', 'Test D3', 'Test D4', 'Test D5', 'Test D6', 'Test D7',
             'Test D8', 'Test D9', 'Test D10']]

#variables
sncode = StringVar
ycode = StringVar
testerIDcode = StringVar
userIDcode = StringVar

class GUI:
    def __init__(self, master=None):
        self.master = master

        testsFrame = LabelFrame(master, width=GUI_WIDTH/4, height=GUI_HEIGHT*.95, text='Tests')
        testsFrame.grid(column=0, row=0, sticky=N)
        monFrame = LabelFrame(master, width=GUI_WIDTH*2, height=GUI_HEIGHT*.55, text='Monitors')
        monFrame.grid(column=2, row=0, sticky=N)
        #resFrame = LabelFrame(master, width=GUI_WIDTH/2, height=GUI_HEIGHT*.20, text='UUT Result')
        #resFrame.grid(column=2, row=1, sticky=N)
        configFrame = LabelFrame(master, width=GUI_WIDTH/4, height=GUI_HEIGHT*.95, text='Configuration & Control')
        configFrame.grid(column=4, row=0, sticky=N)

        self.tests_tab = []
        self.rb = []
        self.choice = IntVar(value=-1)  # -1 means no button is pushed.
        self.tests_nb = ttk.Notebook(testsFrame)
        for i in range(len(GroupTests)):
            teststab = Frame(self.tests_nb)
            self.tests_nb.add(teststab, text=GroupTests[i])
            self.tests_tab.append(teststab)

            #self.choice = IntVar(value=-1)  # -1 means no button is pushed.
            for j, subtest in enumerate(SubTests[i]):
                radio_btn = Radiobutton(self.tests_tab[i], text=subtest, fg='black', value=(i*len(SubTests[i])+j),
                                        variable=self.choice, command=self.btn_callback)
                radio_btn.grid(column=0, row=(2 + j), sticky=W, ipadx=0)
                self.rb.append(radio_btn)
            print(i)
            print(SubTests[i])

        print(self.tests_tab)
        print('choise: ', self.choice.get())
        print(self.rb)
        self.tests_nb.grid(column=0, row=0, columnspan=4)
        self.statusBar = Label(master, width=10 * len(GroupTests), relief=SUNKEN, text='Test Status: IDLE')
        self.statusBar.grid(column=0, row=2, sticky=SW, padx=10, pady=20, columnspan=3)  # len(GroupTests)) #3
        #tests_nb.select(3)

        col = 0
        mon_nb = ttk.Notebook(monFrame)
        mon_nb_tab1 = Frame(mon_nb)
        mon_nb_tab2 = Frame(mon_nb)
        mon_nb_tab3 = Frame(mon_nb)
        mon_nb_tab4 = Frame(mon_nb)
        mon_nb.add(mon_nb_tab1, text="Test Results")
        mon_nb.add(mon_nb_tab2, text="Port 1")
        mon_nb.add(mon_nb_tab3, text="Port 2")
        mon_nb.add(mon_nb_tab4, text="Neptune Monitor")
        mon_nb.grid(column=4, row=0, columnspan=4)
        self.results = scrolledtext.ScrolledText(mon_nb_tab1, width=40, height=22, bg='lightcyan', fg='black')
        self.results.grid(column=(col + len(GroupTests)), row=0, padx=30, pady=30)
        self.results.insert(END, 'Waiting to start ...')
        port1 = scrolledtext.ScrolledText(mon_nb_tab2, width=40, height=22, bg='lightblue', fg='black')
        port1.grid(column=(col + len(GroupTests)), row=0, padx=30, pady=30)
        port1.insert(END, 'Waiting to connect ...')
        port2 = scrolledtext.ScrolledText(mon_nb_tab3, width=40, height=22, bg='#afd3a3',
                                          fg='black')  # lightblue was lightgray
        port2.grid(column=(col + len(GroupTests)), row=0, padx=30, pady=30)
        port2.insert(END, 'Waiting to connect ...')
        neptuneMon = scrolledtext.ScrolledText(mon_nb_tab4, width=40, height=22, bg='black', fg='lightgreen')
        neptuneMon.grid(column=(col + len(GroupTests)), row=0, padx=30, pady=30)
        neptuneMon.insert(END, 'Waiting to connect ...')

        lblSerNum = Label(configFrame, text="Serial Number")
        lblSerNum.grid(column=0, row=1, sticky=W, padx=5)
        entrySerNum = Entry(configFrame, width=12, textvariable=sncode)  # , font=('Verdana', 9))
        entrySerNum.grid(column=0, row=2, sticky=W, padx=5)
        lblYNum = Label(configFrame, text="Y Number")
        lblYNum.grid(column=0, row=3, sticky=W, padx=5)
        entryYNum = Entry(configFrame, width=12, textvariable=ycode)  # , font=('Verdana', 9))
        entryYNum.grid(column=0, row=4, sticky=W, padx=5)
        lblTesterID = Label(configFrame, text="Tester ID")
        lblTesterID.grid(column=1, row=1, sticky=W, padx=5)
        entryTesterID = Entry(configFrame, width=12, textvariable=testerIDcode)  # , font=('Verdana', 9))
        entryTesterID.grid(column=1, row=2, sticky=W, padx=5)
        lblUserID = Label(configFrame, text="User ID")
        lblUserID.grid(column=1, row=3, sticky=W, padx=5)
        entryUserID = Entry(configFrame, width=12, textvariable=userIDcode)  # , font=('Verdana', 9))
        entryUserID.grid(column=1, row=4, sticky=W, padx=5)

        Label(configFrame, text="Model Selection").grid(column=0, row=5, sticky=W)
        modelNumber = StringVar()
        self.model_chosen = ttk.Combobox(configFrame, width=12, textvariable=modelNumber, state='readonly')
        #model_chosen.bind('<<ComboboxSelected>>', callback)
        self.model_chosen['values'] = ('V3', 'V4', 'V6', 'V7', 'V8')
        self.model_chosen.grid(column=0, row=6)
        self.model_chosen.current(0)
        print('model chosen: ', self.model_chosen.get())

        Label(configFrame, text="Test Fixture").grid(column=0, row=7, sticky=W)
        tfNumber = StringVar()
        self.tf_chosen = ttk.Combobox(configFrame, width=12, textvariable=tfNumber, state='readonly')
        self.tf_chosen['values'] = ('TF01R', 'TF02', 'TF03R', 'TF04', 'TF05')
        #tf_chosen.bind('<<ComboboxSelected>>', callback)
        self.tf_chosen.grid(column=0, row=8)
        self.tf_chosen.current(0)
        print('tf chosen: ', self.tf_chosen.get())

        fullTest = Button(configFrame, text="Auto Full Test", command=self.autoFullTest)
        fullTest.grid(column=0, row=9, pady=5, ipadx=12)
        powerOnButton = Button(configFrame, text="Power On", command=self.powerOn)
        powerOnButton.grid(column=0, row=10, pady=5, ipadx=12)
        showConfigButton = Button(configFrame, text="Show Config", command=self.showConfig)
        showConfigButton.grid(column=1, row=10, pady=5, ipadx=12)
        powerOffButton = Button(configFrame, text="Power Off", command=self.powerOff)
        powerOffButton.grid(column=0, row=11, pady=5, ipadx=12)
        newTestButton = Button(configFrame, text="New Test", command=self.newTest)  # showPassTestResult)
        newTestButton.grid(column=1, row=11, pady=5, ipadx=12)

        exitButton = Button(master, text="EXIT", width=30, command=master.quit)
        exitButton.grid(column=4, row=2, pady=20, padx=20, sticky=SE)

        #self.choice = IntVar(value=-1)  # -1 means no button is pushed.
        #self.rb = []
        #for j, subtest in enumerate(SubTests[0]):
        #    radio_btn = Radiobutton(self.tests_tab[0], text=subtest, fg='black', value=j,
        #                            variable=self.choice, command=self.btn_callback(i))
        #    radio_btn.grid(column=0, row=(2 + j), sticky=W, ipadx=0)
        #    self.rb.append(radio_btn)
        #print(self.rb)
    def btn_callback(self):
        #self.index = index
        choosen = self.choice.get()  # Index of button pressed.
        subtest = self.rb[choosen].cget('text')  # Button's text.
        print('You chose : {}'.format(subtest))
        #print(choosen)
    def autoFullTest(self):
        print("autoFullTest was clicked")
        self.tests_nb.select(0)
        for i in range(len(GroupTests)):
            for j in range(len(SubTests[i])):
                self.rb[i*len(SubTests[i])+j].config(fg='black')
        self.statusBar.config(text='Test Status: In Progress')
        self.statusBar.config(foreground='black', background='yellow')
        time.sleep(.5)
        self.master.update()
        self.results.insert(END, '\n')
        for i in range(len(GroupTests)):
            self.tests_nb.select(i)
            for j in range(len(SubTests[i])):
                self.rb[i*len(SubTests[i])+j].select()  # invoke executes btn_callback also
                self.rb[i*len(SubTests[i])+j].config(fg='blue')
                self.results.insert(END, 'Now tested ' + SubTests[i][j] + '\n')
                print('Current rb: ', (i*len(SubTests[i])+j-1))
                if ((i*len(SubTests[i])+j-1) >= 0):
                    self.rb[i*len(SubTests[i])+j-1].config(fg='black')
                time.sleep(.5)
                self.master.update()
        self.statusBar.config(text='Test Status: IDLE')
        self.statusBar.config(foreground='black', background='white')
    def powerOn(self):
        self.statusBar.config(text='UUT is powered on')
        self.statusBar.config(foreground='red', background='white')
    def powerOff(self):
        self.statusBar.config(text='UUT is powered off')
        self.statusBar.config(foreground='black', background='white') #1225a8
    def showConfig(self):
        config = "Model chosen: " + self.model_chosen.get() + ", Test Fixture: " + self.tf_chosen.get()
        self.statusBar.config(text=config)
        self.statusBar.config(foreground='black', background='white')
    def newTest(self):
        print("newTest was clicked")

root = Tk()
gui_resolution = str(GUI_WIDTH)+'x'+str(GUI_HEIGHT)
root.geometry(gui_resolution)
root.resizable(FALSE, FALSE)
root.title("INTRACOM TELECOM Test Equipment GUI Template")
# root.iconbitmap('C:\MyDocuments\Delphi\IcomIcons\intracom1.ico')

#GUI.choise.set(5)

display = GUI(root)

root.mainloop()
